Motion control with PID-controller and Twiddle algorithm to find PID parameters (CS-373 unit 5) with real robot.

In this example we illustrate the application of PID controller to automatically drive the robot as close as possible to the ideal straight line trajectory.

As a robotics platform this example uses hardware and software we are developing for our Veter-project:
https://github.com/veter-team/veter/wiki . 
Corresponding sources are available here:
https://github.com/andreynech/udacity-cs373

In the original CS-373 Unit 5 examples, the goal was to drive the simulated robot as close as possible to the X axis. Vertical deviation from X axis (Y coordinate) was treated as an error and used as input for PID controller. Twiddle algorithm was introduced as a way to find P, I and D parameters.

In the real robot case there are three main problems:

# what is the desired (ideal) path

# how to measure the deviation from it

# how to implement twiddle algorithm with real robot in such a way that reasonable amount of time (for example, less then 30min.) will required to discover good PID parameters. It should be possible to conduct experiment within limited space (for example, typical office room) without hitting walls and without manual intervention during the run.

To address theese problems, we decide to rely on the available on-board camera. The idea is to place well destinguishable markers (black circles on the white background) on the opposite walls in the room. We decide to use available Python interface to OpenCV library to detect the markers. In particular we use cv.HoughCircles() function to detect circles. To improve detection performance, before applying HoughCircles, the original image is converted to the gray-scale, then Canny edge detection algorithm is executed followed by gaussian smoothing. The result of these steps is the location of the center and radius of the circle in the cameras field of view. This information is used to:

# define the "ideal" path. The goal for the robot is to drive direct towards the center with as little deviations as possible. This is what we consider as the ideal streight-line trajectory. 

# deviation is measured as distance between the detected circle center and middle (320 pixels) of the camera's frame (640x480 RGBA bitmap). The goal is to control the robot in such a way, that detected circle center is permanently kept in the middle of the frame.

# the twiddle algorithm implemented (copy/pasted) exactly as in the original Unit 5 assignments. To prevent the robot from comletely driving away when trying bad PID parameter we use the following strategy. First, we try to drive towards detected marker with current PID parameters. For each camera frame we measure the error as deviation of the circle center from the middle of the frame. If, the cirlcle goes out of the camera field of view, then there is no circle detected and we set detected radius to zero. At each iteration we react at this condition by stopping using PID controller and start on-place rotation until the marker will come back in the field of view. Then we switch back to the PID-controlled movement towards the marker. As we approach the marker, the radius of the circle will grow up. We define the limit of 100 pixels as indication that we are close to the wall (where the marker is placed). As soon as we reach the 100 pixel radius limit, we again start on-place rotation sequence until we detect the marker with visible radius less then 100 pixels. This marker will be the one on the opposite wall. After that, we continue PID-controlled movement towards newly detected marker.



The video of the experiment could be seen on YouTube:
